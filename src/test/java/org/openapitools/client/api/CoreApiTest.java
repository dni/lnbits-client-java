/*
 * lnbits
 * API for LNbits, the free and open source bitcoin wallet and accounts system with plugins.
 *
 * The version of the OpenAPI document: 0.10.9
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.ConversionData;
import org.openapitools.client.model.CreateExtension;
import org.openapitools.client.model.CreateInvoiceData;
import org.openapitools.client.model.CreateLNURLData;
import org.openapitools.client.model.CreateLnurlAuth;
import org.openapitools.client.model.CreateTopup;
import org.openapitools.client.model.DecodePayment;
import org.openapitools.client.model.EditableSettings;
import org.openapitools.client.model.HTTPValidationError;
import java.time.OffsetDateTime;
import org.openapitools.client.model.Page;
import org.openapitools.client.model.Payment;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for CoreApi
 */
@Disabled
public class CoreApiTest {

    private final CoreApi api = new CoreApi();

    /**
     * Api Delete Settings
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiDeleteSettingsAdminApiV1SettingsDeleteTest() throws ApiException {
        String usr = null;
        Object response = api.apiDeleteSettingsAdminApiV1SettingsDelete(usr);
        // TODO: test validations
    }

    /**
     * Api Download Backup
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiDownloadBackupAdminApiV1BackupGetTest() throws ApiException {
        String usr = null;
        api.apiDownloadBackupAdminApiV1BackupGet(usr);
        // TODO: test validations
    }

    /**
     * Api Fiat As Sats
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiFiatAsSatsApiV1ConversionPostTest() throws ApiException {
        ConversionData conversionData = null;
        Object response = api.apiFiatAsSatsApiV1ConversionPost(conversionData);
        // TODO: test validations
    }

    /**
     * Api Get Settings
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiGetSettingsAdminApiV1SettingsGetTest() throws ApiException {
        String usr = null;
        Object response = api.apiGetSettingsAdminApiV1SettingsGet(usr);
        // TODO: test validations
    }

    /**
     * Api Install Extension
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiInstallExtensionApiV1ExtensionPostTest() throws ApiException {
        String usr = null;
        CreateExtension createExtension = null;
        Object response = api.apiInstallExtensionApiV1ExtensionPost(usr, createExtension);
        // TODO: test validations
    }

    /**
     * Api List Currencies Available
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiListCurrenciesAvailableApiV1CurrenciesGetTest() throws ApiException {
        Object response = api.apiListCurrenciesAvailableApiV1CurrenciesGet();
        // TODO: test validations
    }

    /**
     * Api Lnurlscan
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiLnurlscanApiV1LnurlscanCodeGetTest() throws ApiException {
        String code = null;
        Object response = api.apiLnurlscanApiV1LnurlscanCodeGet(code);
        // TODO: test validations
    }

    /**
     * Api Payment
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiPaymentApiV1PaymentsPaymentHashGetTest() throws ApiException {
        Object paymentHash = null;
        String xApiKey = null;
        Object response = api.apiPaymentApiV1PaymentsPaymentHashGet(paymentHash, xApiKey);
        // TODO: test validations
    }

    /**
     * Api Payments Create
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiPaymentsCreateApiV1PaymentsPostTest() throws ApiException {
        CreateInvoiceData createInvoiceData = null;
        Object response = api.apiPaymentsCreateApiV1PaymentsPost(createInvoiceData);
        // TODO: test validations
    }

    /**
     * Api Payments Decode
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiPaymentsDecodeApiV1PaymentsDecodePostTest() throws ApiException {
        DecodePayment decodePayment = null;
        Object response = api.apiPaymentsDecodeApiV1PaymentsDecodePost(decodePayment);
        // TODO: test validations
    }

    /**
     * Api Payments Pay Lnurl
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiPaymentsPayLnurlApiV1PaymentsLnurlPostTest() throws ApiException {
        CreateLNURLData createLNURLData = null;
        Object response = api.apiPaymentsPayLnurlApiV1PaymentsLnurlPost(createLNURLData);
        // TODO: test validations
    }

    /**
     * Api Payments Sse
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiPaymentsSseApiV1PaymentsSseGetTest() throws ApiException {
        Object response = api.apiPaymentsSseApiV1PaymentsSseGet();
        // TODO: test validations
    }

    /**
     * Api Perform Lnurlauth
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiPerformLnurlauthApiV1LnurlauthPostTest() throws ApiException {
        CreateLnurlAuth createLnurlAuth = null;
        Object response = api.apiPerformLnurlauthApiV1LnurlauthPost(createLnurlAuth);
        // TODO: test validations
    }

    /**
     * Api Public Payment Longpolling
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiPublicPaymentLongpollingPublicV1PaymentPaymentHashGetTest() throws ApiException {
        Object paymentHash = null;
        Object response = api.apiPublicPaymentLongpollingPublicV1PaymentPaymentHashGet(paymentHash);
        // TODO: test validations
    }

    /**
     * Api Restart Server
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiRestartServerAdminApiV1RestartGetTest() throws ApiException {
        String usr = null;
        Object response = api.apiRestartServerAdminApiV1RestartGet(usr);
        // TODO: test validations
    }

    /**
     * Api Uninstall Extension
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiUninstallExtensionApiV1ExtensionExtIdDeleteTest() throws ApiException {
        String extId = null;
        String usr = null;
        Object response = api.apiUninstallExtensionApiV1ExtensionExtIdDelete(extId, usr);
        // TODO: test validations
    }

    /**
     * Api Update Settings
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiUpdateSettingsAdminApiV1SettingsPutTest() throws ApiException {
        String usr = null;
        EditableSettings editableSettings = null;
        Object response = api.apiUpdateSettingsAdminApiV1SettingsPut(usr, editableSettings);
        // TODO: test validations
    }

    /**
     * Api Update Wallet
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiUpdateWalletApiV1WalletNewNamePutTest() throws ApiException {
        String newName = null;
        Object response = api.apiUpdateWalletApiV1WalletNewNamePut(newName);
        // TODO: test validations
    }

    /**
     * Api Wallet
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiWalletApiV1WalletGetTest() throws ApiException {
        Object response = api.apiWalletApiV1WalletGet();
        // TODO: test validations
    }

    /**
     * Audit
     *
     * show the current balance of the node and the LNbits database
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void auditAdminApiV1AuditGetTest() throws ApiException {
        String usr = null;
        Object response = api.auditAdminApiV1AuditGet(usr);
        // TODO: test validations
    }

    /**
     * Delete Extension Db
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteExtensionDbApiV1ExtensionExtIdDbDeleteTest() throws ApiException {
        String extId = null;
        String usr = null;
        Object response = api.deleteExtensionDbApiV1ExtensionExtIdDbDelete(extId, usr);
        // TODO: test validations
    }

    /**
     * Get Extension Release
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getExtensionReleaseApiV1ExtensionReleaseOrgRepoTagNameGetTest() throws ApiException {
        String org = null;
        String repo = null;
        String tagName = null;
        String usr = null;
        Object response = api.getExtensionReleaseApiV1ExtensionReleaseOrgRepoTagNameGet(org, repo, tagName, usr);
        // TODO: test validations
    }

    /**
     * Get Extension Releases
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getExtensionReleasesApiV1ExtensionExtIdReleasesGetTest() throws ApiException {
        String extId = null;
        String usr = null;
        Object response = api.getExtensionReleasesApiV1ExtensionExtIdReleasesGet(extId, usr);
        // TODO: test validations
    }

    /**
     * Health
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void healthApiV1HealthGetTest() throws ApiException {
        Object response = api.healthApiV1HealthGet();
        // TODO: test validations
    }

    /**
     * Img
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void imgApiV1QrcodeDataGetTest() throws ApiException {
        Object data = null;
        api.imgApiV1QrcodeDataGet(data);
        // TODO: test validations
    }

    /**
     * get list of payments
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void paymentListApiV1PaymentsGetTest() throws ApiException {
        Integer limit = null;
        Integer offset = null;
        String sortby = null;
        String direction = null;
        String search = null;
        String checkingId = null;
        Integer amount = null;
        Integer fee = null;
        String memo = null;
        OffsetDateTime time = null;
        String bolt11 = null;
        String preimage = null;
        String paymentHash = null;
        OffsetDateTime expiry = null;
        Object extra = null;
        String walletId = null;
        String webhook = null;
        Integer webhookStatus = null;
        List<Payment> response = api.paymentListApiV1PaymentsGet(limit, offset, sortby, direction, search, checkingId, amount, fee, memo, time, bolt11, preimage, paymentHash, expiry, extra, walletId, webhook, webhookStatus);
        // TODO: test validations
    }

    /**
     * get paginated list of payments
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void paymentListApiV1PaymentsPaginatedGetTest() throws ApiException {
        Integer limit = null;
        Integer offset = null;
        String sortby = null;
        String direction = null;
        String search = null;
        String checkingId = null;
        Integer amount = null;
        Integer fee = null;
        String memo = null;
        OffsetDateTime time = null;
        String bolt11 = null;
        String preimage = null;
        String paymentHash = null;
        OffsetDateTime expiry = null;
        Object extra = null;
        String walletId = null;
        String webhook = null;
        Integer webhookStatus = null;
        Page response = api.paymentListApiV1PaymentsPaginatedGet(limit, offset, sortby, direction, search, checkingId, amount, fee, memo, time, bolt11, preimage, paymentHash, expiry, extra, walletId, webhook, webhookStatus);
        // TODO: test validations
    }

    /**
     * Tinyurl
     *
     * creates a tinyurl
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tinyurlApiV1TinyurlPostTest() throws ApiException {
        String url = null;
        Boolean endless = null;
        Object response = api.tinyurlApiV1TinyurlPost(url, endless);
        // TODO: test validations
    }

    /**
     * Tinyurl
     *
     * delete a tinyurl by id
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tinyurlApiV1TinyurlTinyurlIdDeleteTest() throws ApiException {
        String tinyurlId = null;
        Object response = api.tinyurlApiV1TinyurlTinyurlIdDelete(tinyurlId);
        // TODO: test validations
    }

    /**
     * Tinyurl
     *
     * get a tinyurl by id
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tinyurlApiV1TinyurlTinyurlIdGetTest() throws ApiException {
        String tinyurlId = null;
        Object response = api.tinyurlApiV1TinyurlTinyurlIdGet(tinyurlId);
        // TODO: test validations
    }

    /**
     * Tinyurl
     *
     * redirects a tinyurl by id
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tinyurlTTinyurlIdGetTest() throws ApiException {
        String tinyurlId = null;
        Object response = api.tinyurlTTinyurlIdGet(tinyurlId);
        // TODO: test validations
    }

    /**
     * Topup
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void topupAdminApiV1TopupPutTest() throws ApiException {
        String usr = null;
        CreateTopup createTopup = null;
        Object response = api.topupAdminApiV1TopupPut(usr, createTopup);
        // TODO: test validations
    }

    /**
     * Websocket Update Get
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void websocketUpdateGetApiV1WsItemIdDataGetTest() throws ApiException {
        String itemId = null;
        String data = null;
        Object response = api.websocketUpdateGetApiV1WsItemIdDataGet(itemId, data);
        // TODO: test validations
    }

    /**
     * Websocket Update Post
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void websocketUpdatePostApiV1WsItemIdPostTest() throws ApiException {
        String itemId = null;
        String data = null;
        Object response = api.websocketUpdatePostApiV1WsItemIdPost(itemId, data);
        // TODO: test validations
    }

}
