/*
 * lnbits
 * API for LNbits, the free and open source bitcoin wallet and accounts system with plugins.
 *
 * The version of the OpenAPI document: 0.10.9
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ConversionData;
import org.openapitools.client.model.CreateExtension;
import org.openapitools.client.model.CreateInvoiceData;
import org.openapitools.client.model.CreateLNURLData;
import org.openapitools.client.model.CreateLnurlAuth;
import org.openapitools.client.model.CreateTopup;
import org.openapitools.client.model.DecodePayment;
import org.openapitools.client.model.EditableSettings;
import org.openapitools.client.model.HTTPValidationError;
import java.time.OffsetDateTime;
import org.openapitools.client.model.Page;
import org.openapitools.client.model.Payment;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class CoreApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public CoreApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CoreApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for apiDeleteSettingsAdminApiV1SettingsDelete
     * @param usr  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiDeleteSettingsAdminApiV1SettingsDeleteCall(String usr, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/api/v1/settings/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (usr != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("usr", usr));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiDeleteSettingsAdminApiV1SettingsDeleteValidateBeforeCall(String usr, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'usr' is set
        if (usr == null) {
            throw new ApiException("Missing the required parameter 'usr' when calling apiDeleteSettingsAdminApiV1SettingsDelete(Async)");
        }

        return apiDeleteSettingsAdminApiV1SettingsDeleteCall(usr, _callback);

    }

    /**
     * Api Delete Settings
     * 
     * @param usr  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public Object apiDeleteSettingsAdminApiV1SettingsDelete(String usr) throws ApiException {
        ApiResponse<Object> localVarResp = apiDeleteSettingsAdminApiV1SettingsDeleteWithHttpInfo(usr);
        return localVarResp.getData();
    }

    /**
     * Api Delete Settings
     * 
     * @param usr  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> apiDeleteSettingsAdminApiV1SettingsDeleteWithHttpInfo(String usr) throws ApiException {
        okhttp3.Call localVarCall = apiDeleteSettingsAdminApiV1SettingsDeleteValidateBeforeCall(usr, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Api Delete Settings (asynchronously)
     * 
     * @param usr  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiDeleteSettingsAdminApiV1SettingsDeleteAsync(String usr, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiDeleteSettingsAdminApiV1SettingsDeleteValidateBeforeCall(usr, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiDownloadBackupAdminApiV1BackupGet
     * @param usr  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiDownloadBackupAdminApiV1BackupGetCall(String usr, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/api/v1/backup/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (usr != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("usr", usr));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiDownloadBackupAdminApiV1BackupGetValidateBeforeCall(String usr, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'usr' is set
        if (usr == null) {
            throw new ApiException("Missing the required parameter 'usr' when calling apiDownloadBackupAdminApiV1BackupGet(Async)");
        }

        return apiDownloadBackupAdminApiV1BackupGetCall(usr, _callback);

    }

    /**
     * Api Download Backup
     * 
     * @param usr  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public void apiDownloadBackupAdminApiV1BackupGet(String usr) throws ApiException {
        apiDownloadBackupAdminApiV1BackupGetWithHttpInfo(usr);
    }

    /**
     * Api Download Backup
     * 
     * @param usr  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> apiDownloadBackupAdminApiV1BackupGetWithHttpInfo(String usr) throws ApiException {
        okhttp3.Call localVarCall = apiDownloadBackupAdminApiV1BackupGetValidateBeforeCall(usr, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Api Download Backup (asynchronously)
     * 
     * @param usr  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiDownloadBackupAdminApiV1BackupGetAsync(String usr, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiDownloadBackupAdminApiV1BackupGetValidateBeforeCall(usr, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiFiatAsSatsApiV1ConversionPost
     * @param conversionData  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiFiatAsSatsApiV1ConversionPostCall(ConversionData conversionData, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = conversionData;

        // create path and map variables
        String localVarPath = "/api/v1/conversion";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiFiatAsSatsApiV1ConversionPostValidateBeforeCall(ConversionData conversionData, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'conversionData' is set
        if (conversionData == null) {
            throw new ApiException("Missing the required parameter 'conversionData' when calling apiFiatAsSatsApiV1ConversionPost(Async)");
        }

        return apiFiatAsSatsApiV1ConversionPostCall(conversionData, _callback);

    }

    /**
     * Api Fiat As Sats
     * 
     * @param conversionData  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public Object apiFiatAsSatsApiV1ConversionPost(ConversionData conversionData) throws ApiException {
        ApiResponse<Object> localVarResp = apiFiatAsSatsApiV1ConversionPostWithHttpInfo(conversionData);
        return localVarResp.getData();
    }

    /**
     * Api Fiat As Sats
     * 
     * @param conversionData  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> apiFiatAsSatsApiV1ConversionPostWithHttpInfo(ConversionData conversionData) throws ApiException {
        okhttp3.Call localVarCall = apiFiatAsSatsApiV1ConversionPostValidateBeforeCall(conversionData, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Api Fiat As Sats (asynchronously)
     * 
     * @param conversionData  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiFiatAsSatsApiV1ConversionPostAsync(ConversionData conversionData, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiFiatAsSatsApiV1ConversionPostValidateBeforeCall(conversionData, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiGetSettingsAdminApiV1SettingsGet
     * @param usr  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiGetSettingsAdminApiV1SettingsGetCall(String usr, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/api/v1/settings/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (usr != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("usr", usr));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiGetSettingsAdminApiV1SettingsGetValidateBeforeCall(String usr, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'usr' is set
        if (usr == null) {
            throw new ApiException("Missing the required parameter 'usr' when calling apiGetSettingsAdminApiV1SettingsGet(Async)");
        }

        return apiGetSettingsAdminApiV1SettingsGetCall(usr, _callback);

    }

    /**
     * Api Get Settings
     * 
     * @param usr  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public Object apiGetSettingsAdminApiV1SettingsGet(String usr) throws ApiException {
        ApiResponse<Object> localVarResp = apiGetSettingsAdminApiV1SettingsGetWithHttpInfo(usr);
        return localVarResp.getData();
    }

    /**
     * Api Get Settings
     * 
     * @param usr  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> apiGetSettingsAdminApiV1SettingsGetWithHttpInfo(String usr) throws ApiException {
        okhttp3.Call localVarCall = apiGetSettingsAdminApiV1SettingsGetValidateBeforeCall(usr, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Api Get Settings (asynchronously)
     * 
     * @param usr  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiGetSettingsAdminApiV1SettingsGetAsync(String usr, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiGetSettingsAdminApiV1SettingsGetValidateBeforeCall(usr, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiInstallExtensionApiV1ExtensionPost
     * @param usr  (required)
     * @param createExtension  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiInstallExtensionApiV1ExtensionPostCall(String usr, CreateExtension createExtension, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createExtension;

        // create path and map variables
        String localVarPath = "/api/v1/extension";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (usr != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("usr", usr));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiInstallExtensionApiV1ExtensionPostValidateBeforeCall(String usr, CreateExtension createExtension, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'usr' is set
        if (usr == null) {
            throw new ApiException("Missing the required parameter 'usr' when calling apiInstallExtensionApiV1ExtensionPost(Async)");
        }

        // verify the required parameter 'createExtension' is set
        if (createExtension == null) {
            throw new ApiException("Missing the required parameter 'createExtension' when calling apiInstallExtensionApiV1ExtensionPost(Async)");
        }

        return apiInstallExtensionApiV1ExtensionPostCall(usr, createExtension, _callback);

    }

    /**
     * Api Install Extension
     * 
     * @param usr  (required)
     * @param createExtension  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public Object apiInstallExtensionApiV1ExtensionPost(String usr, CreateExtension createExtension) throws ApiException {
        ApiResponse<Object> localVarResp = apiInstallExtensionApiV1ExtensionPostWithHttpInfo(usr, createExtension);
        return localVarResp.getData();
    }

    /**
     * Api Install Extension
     * 
     * @param usr  (required)
     * @param createExtension  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> apiInstallExtensionApiV1ExtensionPostWithHttpInfo(String usr, CreateExtension createExtension) throws ApiException {
        okhttp3.Call localVarCall = apiInstallExtensionApiV1ExtensionPostValidateBeforeCall(usr, createExtension, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Api Install Extension (asynchronously)
     * 
     * @param usr  (required)
     * @param createExtension  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiInstallExtensionApiV1ExtensionPostAsync(String usr, CreateExtension createExtension, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiInstallExtensionApiV1ExtensionPostValidateBeforeCall(usr, createExtension, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiListCurrenciesAvailableApiV1CurrenciesGet
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiListCurrenciesAvailableApiV1CurrenciesGetCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/currencies";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiListCurrenciesAvailableApiV1CurrenciesGetValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return apiListCurrenciesAvailableApiV1CurrenciesGetCall(_callback);

    }

    /**
     * Api List Currencies Available
     * 
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     */
    public Object apiListCurrenciesAvailableApiV1CurrenciesGet() throws ApiException {
        ApiResponse<Object> localVarResp = apiListCurrenciesAvailableApiV1CurrenciesGetWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Api List Currencies Available
     * 
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> apiListCurrenciesAvailableApiV1CurrenciesGetWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = apiListCurrenciesAvailableApiV1CurrenciesGetValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Api List Currencies Available (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiListCurrenciesAvailableApiV1CurrenciesGetAsync(final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiListCurrenciesAvailableApiV1CurrenciesGetValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiLnurlscanApiV1LnurlscanCodeGet
     * @param code  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiLnurlscanApiV1LnurlscanCodeGetCall(String code, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/lnurlscan/{code}"
            .replace("{" + "code" + "}", localVarApiClient.escapeString(code.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIKeyHeader", "APIKeyQuery" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiLnurlscanApiV1LnurlscanCodeGetValidateBeforeCall(String code, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'code' is set
        if (code == null) {
            throw new ApiException("Missing the required parameter 'code' when calling apiLnurlscanApiV1LnurlscanCodeGet(Async)");
        }

        return apiLnurlscanApiV1LnurlscanCodeGetCall(code, _callback);

    }

    /**
     * Api Lnurlscan
     * 
     * @param code  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public Object apiLnurlscanApiV1LnurlscanCodeGet(String code) throws ApiException {
        ApiResponse<Object> localVarResp = apiLnurlscanApiV1LnurlscanCodeGetWithHttpInfo(code);
        return localVarResp.getData();
    }

    /**
     * Api Lnurlscan
     * 
     * @param code  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> apiLnurlscanApiV1LnurlscanCodeGetWithHttpInfo(String code) throws ApiException {
        okhttp3.Call localVarCall = apiLnurlscanApiV1LnurlscanCodeGetValidateBeforeCall(code, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Api Lnurlscan (asynchronously)
     * 
     * @param code  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiLnurlscanApiV1LnurlscanCodeGetAsync(String code, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiLnurlscanApiV1LnurlscanCodeGetValidateBeforeCall(code, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiPaymentApiV1PaymentsPaymentHashGet
     * @param paymentHash  (required)
     * @param xApiKey  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiPaymentApiV1PaymentsPaymentHashGetCall(Object paymentHash, String xApiKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/payments/{payment_hash}"
            .replace("{" + "payment_hash" + "}", localVarApiClient.escapeString(paymentHash.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xApiKey != null) {
            localVarHeaderParams.put("X-Api-Key", localVarApiClient.parameterToString(xApiKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiPaymentApiV1PaymentsPaymentHashGetValidateBeforeCall(Object paymentHash, String xApiKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'paymentHash' is set
        if (paymentHash == null) {
            throw new ApiException("Missing the required parameter 'paymentHash' when calling apiPaymentApiV1PaymentsPaymentHashGet(Async)");
        }

        return apiPaymentApiV1PaymentsPaymentHashGetCall(paymentHash, xApiKey, _callback);

    }

    /**
     * Api Payment
     * 
     * @param paymentHash  (required)
     * @param xApiKey  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public Object apiPaymentApiV1PaymentsPaymentHashGet(Object paymentHash, String xApiKey) throws ApiException {
        ApiResponse<Object> localVarResp = apiPaymentApiV1PaymentsPaymentHashGetWithHttpInfo(paymentHash, xApiKey);
        return localVarResp.getData();
    }

    /**
     * Api Payment
     * 
     * @param paymentHash  (required)
     * @param xApiKey  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> apiPaymentApiV1PaymentsPaymentHashGetWithHttpInfo(Object paymentHash, String xApiKey) throws ApiException {
        okhttp3.Call localVarCall = apiPaymentApiV1PaymentsPaymentHashGetValidateBeforeCall(paymentHash, xApiKey, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Api Payment (asynchronously)
     * 
     * @param paymentHash  (required)
     * @param xApiKey  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiPaymentApiV1PaymentsPaymentHashGetAsync(Object paymentHash, String xApiKey, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiPaymentApiV1PaymentsPaymentHashGetValidateBeforeCall(paymentHash, xApiKey, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiPaymentsCreateApiV1PaymentsPost
     * @param createInvoiceData  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiPaymentsCreateApiV1PaymentsPostCall(CreateInvoiceData createInvoiceData, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createInvoiceData;

        // create path and map variables
        String localVarPath = "/api/v1/payments";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIKeyHeader", "APIKeyQuery" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiPaymentsCreateApiV1PaymentsPostValidateBeforeCall(CreateInvoiceData createInvoiceData, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'createInvoiceData' is set
        if (createInvoiceData == null) {
            throw new ApiException("Missing the required parameter 'createInvoiceData' when calling apiPaymentsCreateApiV1PaymentsPost(Async)");
        }

        return apiPaymentsCreateApiV1PaymentsPostCall(createInvoiceData, _callback);

    }

    /**
     * Api Payments Create
     * 
     * @param createInvoiceData  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public Object apiPaymentsCreateApiV1PaymentsPost(CreateInvoiceData createInvoiceData) throws ApiException {
        ApiResponse<Object> localVarResp = apiPaymentsCreateApiV1PaymentsPostWithHttpInfo(createInvoiceData);
        return localVarResp.getData();
    }

    /**
     * Api Payments Create
     * 
     * @param createInvoiceData  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> apiPaymentsCreateApiV1PaymentsPostWithHttpInfo(CreateInvoiceData createInvoiceData) throws ApiException {
        okhttp3.Call localVarCall = apiPaymentsCreateApiV1PaymentsPostValidateBeforeCall(createInvoiceData, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Api Payments Create (asynchronously)
     * 
     * @param createInvoiceData  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiPaymentsCreateApiV1PaymentsPostAsync(CreateInvoiceData createInvoiceData, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiPaymentsCreateApiV1PaymentsPostValidateBeforeCall(createInvoiceData, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiPaymentsDecodeApiV1PaymentsDecodePost
     * @param decodePayment  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiPaymentsDecodeApiV1PaymentsDecodePostCall(DecodePayment decodePayment, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = decodePayment;

        // create path and map variables
        String localVarPath = "/api/v1/payments/decode";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiPaymentsDecodeApiV1PaymentsDecodePostValidateBeforeCall(DecodePayment decodePayment, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'decodePayment' is set
        if (decodePayment == null) {
            throw new ApiException("Missing the required parameter 'decodePayment' when calling apiPaymentsDecodeApiV1PaymentsDecodePost(Async)");
        }

        return apiPaymentsDecodeApiV1PaymentsDecodePostCall(decodePayment, _callback);

    }

    /**
     * Api Payments Decode
     * 
     * @param decodePayment  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public Object apiPaymentsDecodeApiV1PaymentsDecodePost(DecodePayment decodePayment) throws ApiException {
        ApiResponse<Object> localVarResp = apiPaymentsDecodeApiV1PaymentsDecodePostWithHttpInfo(decodePayment);
        return localVarResp.getData();
    }

    /**
     * Api Payments Decode
     * 
     * @param decodePayment  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> apiPaymentsDecodeApiV1PaymentsDecodePostWithHttpInfo(DecodePayment decodePayment) throws ApiException {
        okhttp3.Call localVarCall = apiPaymentsDecodeApiV1PaymentsDecodePostValidateBeforeCall(decodePayment, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Api Payments Decode (asynchronously)
     * 
     * @param decodePayment  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiPaymentsDecodeApiV1PaymentsDecodePostAsync(DecodePayment decodePayment, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiPaymentsDecodeApiV1PaymentsDecodePostValidateBeforeCall(decodePayment, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiPaymentsPayLnurlApiV1PaymentsLnurlPost
     * @param createLNURLData  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiPaymentsPayLnurlApiV1PaymentsLnurlPostCall(CreateLNURLData createLNURLData, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createLNURLData;

        // create path and map variables
        String localVarPath = "/api/v1/payments/lnurl";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIKeyHeader", "APIKeyQuery" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiPaymentsPayLnurlApiV1PaymentsLnurlPostValidateBeforeCall(CreateLNURLData createLNURLData, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'createLNURLData' is set
        if (createLNURLData == null) {
            throw new ApiException("Missing the required parameter 'createLNURLData' when calling apiPaymentsPayLnurlApiV1PaymentsLnurlPost(Async)");
        }

        return apiPaymentsPayLnurlApiV1PaymentsLnurlPostCall(createLNURLData, _callback);

    }

    /**
     * Api Payments Pay Lnurl
     * 
     * @param createLNURLData  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public Object apiPaymentsPayLnurlApiV1PaymentsLnurlPost(CreateLNURLData createLNURLData) throws ApiException {
        ApiResponse<Object> localVarResp = apiPaymentsPayLnurlApiV1PaymentsLnurlPostWithHttpInfo(createLNURLData);
        return localVarResp.getData();
    }

    /**
     * Api Payments Pay Lnurl
     * 
     * @param createLNURLData  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> apiPaymentsPayLnurlApiV1PaymentsLnurlPostWithHttpInfo(CreateLNURLData createLNURLData) throws ApiException {
        okhttp3.Call localVarCall = apiPaymentsPayLnurlApiV1PaymentsLnurlPostValidateBeforeCall(createLNURLData, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Api Payments Pay Lnurl (asynchronously)
     * 
     * @param createLNURLData  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiPaymentsPayLnurlApiV1PaymentsLnurlPostAsync(CreateLNURLData createLNURLData, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiPaymentsPayLnurlApiV1PaymentsLnurlPostValidateBeforeCall(createLNURLData, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiPaymentsSseApiV1PaymentsSseGet
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiPaymentsSseApiV1PaymentsSseGetCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/payments/sse";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIKeyHeader", "APIKeyQuery" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiPaymentsSseApiV1PaymentsSseGetValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return apiPaymentsSseApiV1PaymentsSseGetCall(_callback);

    }

    /**
     * Api Payments Sse
     * 
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     */
    public Object apiPaymentsSseApiV1PaymentsSseGet() throws ApiException {
        ApiResponse<Object> localVarResp = apiPaymentsSseApiV1PaymentsSseGetWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Api Payments Sse
     * 
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> apiPaymentsSseApiV1PaymentsSseGetWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = apiPaymentsSseApiV1PaymentsSseGetValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Api Payments Sse (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiPaymentsSseApiV1PaymentsSseGetAsync(final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiPaymentsSseApiV1PaymentsSseGetValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiPerformLnurlauthApiV1LnurlauthPost
     * @param createLnurlAuth  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiPerformLnurlauthApiV1LnurlauthPostCall(CreateLnurlAuth createLnurlAuth, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createLnurlAuth;

        // create path and map variables
        String localVarPath = "/api/v1/lnurlauth";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIKeyHeader", "APIKeyQuery" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiPerformLnurlauthApiV1LnurlauthPostValidateBeforeCall(CreateLnurlAuth createLnurlAuth, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'createLnurlAuth' is set
        if (createLnurlAuth == null) {
            throw new ApiException("Missing the required parameter 'createLnurlAuth' when calling apiPerformLnurlauthApiV1LnurlauthPost(Async)");
        }

        return apiPerformLnurlauthApiV1LnurlauthPostCall(createLnurlAuth, _callback);

    }

    /**
     * Api Perform Lnurlauth
     * 
     * @param createLnurlAuth  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public Object apiPerformLnurlauthApiV1LnurlauthPost(CreateLnurlAuth createLnurlAuth) throws ApiException {
        ApiResponse<Object> localVarResp = apiPerformLnurlauthApiV1LnurlauthPostWithHttpInfo(createLnurlAuth);
        return localVarResp.getData();
    }

    /**
     * Api Perform Lnurlauth
     * 
     * @param createLnurlAuth  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> apiPerformLnurlauthApiV1LnurlauthPostWithHttpInfo(CreateLnurlAuth createLnurlAuth) throws ApiException {
        okhttp3.Call localVarCall = apiPerformLnurlauthApiV1LnurlauthPostValidateBeforeCall(createLnurlAuth, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Api Perform Lnurlauth (asynchronously)
     * 
     * @param createLnurlAuth  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiPerformLnurlauthApiV1LnurlauthPostAsync(CreateLnurlAuth createLnurlAuth, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiPerformLnurlauthApiV1LnurlauthPostValidateBeforeCall(createLnurlAuth, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiPublicPaymentLongpollingPublicV1PaymentPaymentHashGet
     * @param paymentHash  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiPublicPaymentLongpollingPublicV1PaymentPaymentHashGetCall(Object paymentHash, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/public/v1/payment/{payment_hash}"
            .replace("{" + "payment_hash" + "}", localVarApiClient.escapeString(paymentHash.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiPublicPaymentLongpollingPublicV1PaymentPaymentHashGetValidateBeforeCall(Object paymentHash, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'paymentHash' is set
        if (paymentHash == null) {
            throw new ApiException("Missing the required parameter 'paymentHash' when calling apiPublicPaymentLongpollingPublicV1PaymentPaymentHashGet(Async)");
        }

        return apiPublicPaymentLongpollingPublicV1PaymentPaymentHashGetCall(paymentHash, _callback);

    }

    /**
     * Api Public Payment Longpolling
     * 
     * @param paymentHash  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public Object apiPublicPaymentLongpollingPublicV1PaymentPaymentHashGet(Object paymentHash) throws ApiException {
        ApiResponse<Object> localVarResp = apiPublicPaymentLongpollingPublicV1PaymentPaymentHashGetWithHttpInfo(paymentHash);
        return localVarResp.getData();
    }

    /**
     * Api Public Payment Longpolling
     * 
     * @param paymentHash  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> apiPublicPaymentLongpollingPublicV1PaymentPaymentHashGetWithHttpInfo(Object paymentHash) throws ApiException {
        okhttp3.Call localVarCall = apiPublicPaymentLongpollingPublicV1PaymentPaymentHashGetValidateBeforeCall(paymentHash, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Api Public Payment Longpolling (asynchronously)
     * 
     * @param paymentHash  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiPublicPaymentLongpollingPublicV1PaymentPaymentHashGetAsync(Object paymentHash, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiPublicPaymentLongpollingPublicV1PaymentPaymentHashGetValidateBeforeCall(paymentHash, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiRestartServerAdminApiV1RestartGet
     * @param usr  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiRestartServerAdminApiV1RestartGetCall(String usr, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/api/v1/restart/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (usr != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("usr", usr));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiRestartServerAdminApiV1RestartGetValidateBeforeCall(String usr, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'usr' is set
        if (usr == null) {
            throw new ApiException("Missing the required parameter 'usr' when calling apiRestartServerAdminApiV1RestartGet(Async)");
        }

        return apiRestartServerAdminApiV1RestartGetCall(usr, _callback);

    }

    /**
     * Api Restart Server
     * 
     * @param usr  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public Object apiRestartServerAdminApiV1RestartGet(String usr) throws ApiException {
        ApiResponse<Object> localVarResp = apiRestartServerAdminApiV1RestartGetWithHttpInfo(usr);
        return localVarResp.getData();
    }

    /**
     * Api Restart Server
     * 
     * @param usr  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> apiRestartServerAdminApiV1RestartGetWithHttpInfo(String usr) throws ApiException {
        okhttp3.Call localVarCall = apiRestartServerAdminApiV1RestartGetValidateBeforeCall(usr, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Api Restart Server (asynchronously)
     * 
     * @param usr  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiRestartServerAdminApiV1RestartGetAsync(String usr, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiRestartServerAdminApiV1RestartGetValidateBeforeCall(usr, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiUninstallExtensionApiV1ExtensionExtIdDelete
     * @param extId  (required)
     * @param usr  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiUninstallExtensionApiV1ExtensionExtIdDeleteCall(String extId, String usr, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/extension/{ext_id}"
            .replace("{" + "ext_id" + "}", localVarApiClient.escapeString(extId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (usr != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("usr", usr));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiUninstallExtensionApiV1ExtensionExtIdDeleteValidateBeforeCall(String extId, String usr, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'extId' is set
        if (extId == null) {
            throw new ApiException("Missing the required parameter 'extId' when calling apiUninstallExtensionApiV1ExtensionExtIdDelete(Async)");
        }

        // verify the required parameter 'usr' is set
        if (usr == null) {
            throw new ApiException("Missing the required parameter 'usr' when calling apiUninstallExtensionApiV1ExtensionExtIdDelete(Async)");
        }

        return apiUninstallExtensionApiV1ExtensionExtIdDeleteCall(extId, usr, _callback);

    }

    /**
     * Api Uninstall Extension
     * 
     * @param extId  (required)
     * @param usr  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public Object apiUninstallExtensionApiV1ExtensionExtIdDelete(String extId, String usr) throws ApiException {
        ApiResponse<Object> localVarResp = apiUninstallExtensionApiV1ExtensionExtIdDeleteWithHttpInfo(extId, usr);
        return localVarResp.getData();
    }

    /**
     * Api Uninstall Extension
     * 
     * @param extId  (required)
     * @param usr  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> apiUninstallExtensionApiV1ExtensionExtIdDeleteWithHttpInfo(String extId, String usr) throws ApiException {
        okhttp3.Call localVarCall = apiUninstallExtensionApiV1ExtensionExtIdDeleteValidateBeforeCall(extId, usr, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Api Uninstall Extension (asynchronously)
     * 
     * @param extId  (required)
     * @param usr  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiUninstallExtensionApiV1ExtensionExtIdDeleteAsync(String extId, String usr, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiUninstallExtensionApiV1ExtensionExtIdDeleteValidateBeforeCall(extId, usr, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiUpdateSettingsAdminApiV1SettingsPut
     * @param usr  (required)
     * @param editableSettings  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiUpdateSettingsAdminApiV1SettingsPutCall(String usr, EditableSettings editableSettings, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = editableSettings;

        // create path and map variables
        String localVarPath = "/admin/api/v1/settings/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (usr != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("usr", usr));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiUpdateSettingsAdminApiV1SettingsPutValidateBeforeCall(String usr, EditableSettings editableSettings, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'usr' is set
        if (usr == null) {
            throw new ApiException("Missing the required parameter 'usr' when calling apiUpdateSettingsAdminApiV1SettingsPut(Async)");
        }

        // verify the required parameter 'editableSettings' is set
        if (editableSettings == null) {
            throw new ApiException("Missing the required parameter 'editableSettings' when calling apiUpdateSettingsAdminApiV1SettingsPut(Async)");
        }

        return apiUpdateSettingsAdminApiV1SettingsPutCall(usr, editableSettings, _callback);

    }

    /**
     * Api Update Settings
     * 
     * @param usr  (required)
     * @param editableSettings  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public Object apiUpdateSettingsAdminApiV1SettingsPut(String usr, EditableSettings editableSettings) throws ApiException {
        ApiResponse<Object> localVarResp = apiUpdateSettingsAdminApiV1SettingsPutWithHttpInfo(usr, editableSettings);
        return localVarResp.getData();
    }

    /**
     * Api Update Settings
     * 
     * @param usr  (required)
     * @param editableSettings  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> apiUpdateSettingsAdminApiV1SettingsPutWithHttpInfo(String usr, EditableSettings editableSettings) throws ApiException {
        okhttp3.Call localVarCall = apiUpdateSettingsAdminApiV1SettingsPutValidateBeforeCall(usr, editableSettings, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Api Update Settings (asynchronously)
     * 
     * @param usr  (required)
     * @param editableSettings  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiUpdateSettingsAdminApiV1SettingsPutAsync(String usr, EditableSettings editableSettings, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiUpdateSettingsAdminApiV1SettingsPutValidateBeforeCall(usr, editableSettings, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiUpdateWalletApiV1WalletNewNamePut
     * @param newName  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiUpdateWalletApiV1WalletNewNamePutCall(String newName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/wallet/{new_name}"
            .replace("{" + "new_name" + "}", localVarApiClient.escapeString(newName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIKeyHeader", "APIKeyQuery" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiUpdateWalletApiV1WalletNewNamePutValidateBeforeCall(String newName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'newName' is set
        if (newName == null) {
            throw new ApiException("Missing the required parameter 'newName' when calling apiUpdateWalletApiV1WalletNewNamePut(Async)");
        }

        return apiUpdateWalletApiV1WalletNewNamePutCall(newName, _callback);

    }

    /**
     * Api Update Wallet
     * 
     * @param newName  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public Object apiUpdateWalletApiV1WalletNewNamePut(String newName) throws ApiException {
        ApiResponse<Object> localVarResp = apiUpdateWalletApiV1WalletNewNamePutWithHttpInfo(newName);
        return localVarResp.getData();
    }

    /**
     * Api Update Wallet
     * 
     * @param newName  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> apiUpdateWalletApiV1WalletNewNamePutWithHttpInfo(String newName) throws ApiException {
        okhttp3.Call localVarCall = apiUpdateWalletApiV1WalletNewNamePutValidateBeforeCall(newName, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Api Update Wallet (asynchronously)
     * 
     * @param newName  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiUpdateWalletApiV1WalletNewNamePutAsync(String newName, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiUpdateWalletApiV1WalletNewNamePutValidateBeforeCall(newName, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiWalletApiV1WalletGet
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiWalletApiV1WalletGetCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/wallet";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIKeyHeader", "APIKeyQuery" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiWalletApiV1WalletGetValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return apiWalletApiV1WalletGetCall(_callback);

    }

    /**
     * Api Wallet
     * 
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     */
    public Object apiWalletApiV1WalletGet() throws ApiException {
        ApiResponse<Object> localVarResp = apiWalletApiV1WalletGetWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Api Wallet
     * 
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> apiWalletApiV1WalletGetWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = apiWalletApiV1WalletGetValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Api Wallet (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiWalletApiV1WalletGetAsync(final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiWalletApiV1WalletGetValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for auditAdminApiV1AuditGet
     * @param usr  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call auditAdminApiV1AuditGetCall(String usr, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/api/v1/audit";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (usr != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("usr", usr));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call auditAdminApiV1AuditGetValidateBeforeCall(String usr, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'usr' is set
        if (usr == null) {
            throw new ApiException("Missing the required parameter 'usr' when calling auditAdminApiV1AuditGet(Async)");
        }

        return auditAdminApiV1AuditGetCall(usr, _callback);

    }

    /**
     * Audit
     * show the current balance of the node and the LNbits database
     * @param usr  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public Object auditAdminApiV1AuditGet(String usr) throws ApiException {
        ApiResponse<Object> localVarResp = auditAdminApiV1AuditGetWithHttpInfo(usr);
        return localVarResp.getData();
    }

    /**
     * Audit
     * show the current balance of the node and the LNbits database
     * @param usr  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> auditAdminApiV1AuditGetWithHttpInfo(String usr) throws ApiException {
        okhttp3.Call localVarCall = auditAdminApiV1AuditGetValidateBeforeCall(usr, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Audit (asynchronously)
     * show the current balance of the node and the LNbits database
     * @param usr  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call auditAdminApiV1AuditGetAsync(String usr, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = auditAdminApiV1AuditGetValidateBeforeCall(usr, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteExtensionDbApiV1ExtensionExtIdDbDelete
     * @param extId  (required)
     * @param usr  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteExtensionDbApiV1ExtensionExtIdDbDeleteCall(String extId, String usr, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/extension/{ext_id}/db"
            .replace("{" + "ext_id" + "}", localVarApiClient.escapeString(extId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (usr != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("usr", usr));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteExtensionDbApiV1ExtensionExtIdDbDeleteValidateBeforeCall(String extId, String usr, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'extId' is set
        if (extId == null) {
            throw new ApiException("Missing the required parameter 'extId' when calling deleteExtensionDbApiV1ExtensionExtIdDbDelete(Async)");
        }

        // verify the required parameter 'usr' is set
        if (usr == null) {
            throw new ApiException("Missing the required parameter 'usr' when calling deleteExtensionDbApiV1ExtensionExtIdDbDelete(Async)");
        }

        return deleteExtensionDbApiV1ExtensionExtIdDbDeleteCall(extId, usr, _callback);

    }

    /**
     * Delete Extension Db
     * 
     * @param extId  (required)
     * @param usr  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public Object deleteExtensionDbApiV1ExtensionExtIdDbDelete(String extId, String usr) throws ApiException {
        ApiResponse<Object> localVarResp = deleteExtensionDbApiV1ExtensionExtIdDbDeleteWithHttpInfo(extId, usr);
        return localVarResp.getData();
    }

    /**
     * Delete Extension Db
     * 
     * @param extId  (required)
     * @param usr  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> deleteExtensionDbApiV1ExtensionExtIdDbDeleteWithHttpInfo(String extId, String usr) throws ApiException {
        okhttp3.Call localVarCall = deleteExtensionDbApiV1ExtensionExtIdDbDeleteValidateBeforeCall(extId, usr, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete Extension Db (asynchronously)
     * 
     * @param extId  (required)
     * @param usr  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteExtensionDbApiV1ExtensionExtIdDbDeleteAsync(String extId, String usr, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteExtensionDbApiV1ExtensionExtIdDbDeleteValidateBeforeCall(extId, usr, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getExtensionReleaseApiV1ExtensionReleaseOrgRepoTagNameGet
     * @param org  (required)
     * @param repo  (required)
     * @param tagName  (required)
     * @param usr  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getExtensionReleaseApiV1ExtensionReleaseOrgRepoTagNameGetCall(String org, String repo, String tagName, String usr, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/extension/release/{org}/{repo}/{tag_name}"
            .replace("{" + "org" + "}", localVarApiClient.escapeString(org.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "tag_name" + "}", localVarApiClient.escapeString(tagName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (usr != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("usr", usr));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getExtensionReleaseApiV1ExtensionReleaseOrgRepoTagNameGetValidateBeforeCall(String org, String repo, String tagName, String usr, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'org' is set
        if (org == null) {
            throw new ApiException("Missing the required parameter 'org' when calling getExtensionReleaseApiV1ExtensionReleaseOrgRepoTagNameGet(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling getExtensionReleaseApiV1ExtensionReleaseOrgRepoTagNameGet(Async)");
        }

        // verify the required parameter 'tagName' is set
        if (tagName == null) {
            throw new ApiException("Missing the required parameter 'tagName' when calling getExtensionReleaseApiV1ExtensionReleaseOrgRepoTagNameGet(Async)");
        }

        // verify the required parameter 'usr' is set
        if (usr == null) {
            throw new ApiException("Missing the required parameter 'usr' when calling getExtensionReleaseApiV1ExtensionReleaseOrgRepoTagNameGet(Async)");
        }

        return getExtensionReleaseApiV1ExtensionReleaseOrgRepoTagNameGetCall(org, repo, tagName, usr, _callback);

    }

    /**
     * Get Extension Release
     * 
     * @param org  (required)
     * @param repo  (required)
     * @param tagName  (required)
     * @param usr  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public Object getExtensionReleaseApiV1ExtensionReleaseOrgRepoTagNameGet(String org, String repo, String tagName, String usr) throws ApiException {
        ApiResponse<Object> localVarResp = getExtensionReleaseApiV1ExtensionReleaseOrgRepoTagNameGetWithHttpInfo(org, repo, tagName, usr);
        return localVarResp.getData();
    }

    /**
     * Get Extension Release
     * 
     * @param org  (required)
     * @param repo  (required)
     * @param tagName  (required)
     * @param usr  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> getExtensionReleaseApiV1ExtensionReleaseOrgRepoTagNameGetWithHttpInfo(String org, String repo, String tagName, String usr) throws ApiException {
        okhttp3.Call localVarCall = getExtensionReleaseApiV1ExtensionReleaseOrgRepoTagNameGetValidateBeforeCall(org, repo, tagName, usr, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Extension Release (asynchronously)
     * 
     * @param org  (required)
     * @param repo  (required)
     * @param tagName  (required)
     * @param usr  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getExtensionReleaseApiV1ExtensionReleaseOrgRepoTagNameGetAsync(String org, String repo, String tagName, String usr, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getExtensionReleaseApiV1ExtensionReleaseOrgRepoTagNameGetValidateBeforeCall(org, repo, tagName, usr, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getExtensionReleasesApiV1ExtensionExtIdReleasesGet
     * @param extId  (required)
     * @param usr  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getExtensionReleasesApiV1ExtensionExtIdReleasesGetCall(String extId, String usr, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/extension/{ext_id}/releases"
            .replace("{" + "ext_id" + "}", localVarApiClient.escapeString(extId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (usr != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("usr", usr));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getExtensionReleasesApiV1ExtensionExtIdReleasesGetValidateBeforeCall(String extId, String usr, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'extId' is set
        if (extId == null) {
            throw new ApiException("Missing the required parameter 'extId' when calling getExtensionReleasesApiV1ExtensionExtIdReleasesGet(Async)");
        }

        // verify the required parameter 'usr' is set
        if (usr == null) {
            throw new ApiException("Missing the required parameter 'usr' when calling getExtensionReleasesApiV1ExtensionExtIdReleasesGet(Async)");
        }

        return getExtensionReleasesApiV1ExtensionExtIdReleasesGetCall(extId, usr, _callback);

    }

    /**
     * Get Extension Releases
     * 
     * @param extId  (required)
     * @param usr  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public Object getExtensionReleasesApiV1ExtensionExtIdReleasesGet(String extId, String usr) throws ApiException {
        ApiResponse<Object> localVarResp = getExtensionReleasesApiV1ExtensionExtIdReleasesGetWithHttpInfo(extId, usr);
        return localVarResp.getData();
    }

    /**
     * Get Extension Releases
     * 
     * @param extId  (required)
     * @param usr  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> getExtensionReleasesApiV1ExtensionExtIdReleasesGetWithHttpInfo(String extId, String usr) throws ApiException {
        okhttp3.Call localVarCall = getExtensionReleasesApiV1ExtensionExtIdReleasesGetValidateBeforeCall(extId, usr, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Extension Releases (asynchronously)
     * 
     * @param extId  (required)
     * @param usr  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getExtensionReleasesApiV1ExtensionExtIdReleasesGetAsync(String extId, String usr, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getExtensionReleasesApiV1ExtensionExtIdReleasesGetValidateBeforeCall(extId, usr, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for healthApiV1HealthGet
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call healthApiV1HealthGetCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/health";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call healthApiV1HealthGetValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return healthApiV1HealthGetCall(_callback);

    }

    /**
     * Health
     * 
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     */
    public Object healthApiV1HealthGet() throws ApiException {
        ApiResponse<Object> localVarResp = healthApiV1HealthGetWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Health
     * 
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> healthApiV1HealthGetWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = healthApiV1HealthGetValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Health (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call healthApiV1HealthGetAsync(final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = healthApiV1HealthGetValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for imgApiV1QrcodeDataGet
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call imgApiV1QrcodeDataGetCall(Object data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/qrcode/{data}"
            .replace("{" + "data" + "}", localVarApiClient.escapeString(data.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call imgApiV1QrcodeDataGetValidateBeforeCall(Object data, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling imgApiV1QrcodeDataGet(Async)");
        }

        return imgApiV1QrcodeDataGetCall(data, _callback);

    }

    /**
     * Img
     * 
     * @param data  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public void imgApiV1QrcodeDataGet(Object data) throws ApiException {
        imgApiV1QrcodeDataGetWithHttpInfo(data);
    }

    /**
     * Img
     * 
     * @param data  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> imgApiV1QrcodeDataGetWithHttpInfo(Object data) throws ApiException {
        okhttp3.Call localVarCall = imgApiV1QrcodeDataGetValidateBeforeCall(data, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Img (asynchronously)
     * 
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call imgApiV1QrcodeDataGetAsync(Object data, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = imgApiV1QrcodeDataGetValidateBeforeCall(data, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for paymentListApiV1PaymentsGet
     * @param limit  (optional)
     * @param offset  (optional)
     * @param sortby  (optional)
     * @param direction  (optional)
     * @param search Text based search (optional)
     * @param checkingId Supports Filtering (optional)
     * @param amount Supports Filtering. Supports Search (optional)
     * @param fee Supports Filtering (optional)
     * @param memo Supports Filtering. Supports Search (optional)
     * @param time Supports Filtering (optional)
     * @param bolt11 Supports Filtering (optional)
     * @param preimage Supports Filtering (optional)
     * @param paymentHash Supports Filtering (optional)
     * @param expiry Supports Filtering (optional)
     * @param extra Supports Filtering. Nested attributes can be filtered too, e.g. &#x60;extra.[additional].[attributes]&#x60; (optional, default to {})
     * @param walletId Supports Filtering (optional)
     * @param webhook Supports Filtering (optional)
     * @param webhookStatus Supports Filtering (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> list of payments </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call paymentListApiV1PaymentsGetCall(Integer limit, Integer offset, String sortby, String direction, String search, String checkingId, Integer amount, Integer fee, String memo, OffsetDateTime time, String bolt11, String preimage, String paymentHash, OffsetDateTime expiry, Object extra, String walletId, String webhook, Integer webhookStatus, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/payments";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (sortby != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sortby", sortby));
        }

        if (direction != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direction", direction));
        }

        if (search != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("search", search));
        }

        if (checkingId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("checking_id", checkingId));
        }

        if (amount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("amount", amount));
        }

        if (fee != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fee", fee));
        }

        if (memo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("memo", memo));
        }

        if (time != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("time", time));
        }

        if (bolt11 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("bolt11", bolt11));
        }

        if (preimage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("preimage", preimage));
        }

        if (paymentHash != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("payment_hash", paymentHash));
        }

        if (expiry != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("expiry", expiry));
        }

        if (extra != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("extra", extra));
        }

        if (walletId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("wallet_id", walletId));
        }

        if (webhook != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("webhook", webhook));
        }

        if (webhookStatus != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("webhook_status", webhookStatus));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIKeyHeader", "APIKeyQuery" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call paymentListApiV1PaymentsGetValidateBeforeCall(Integer limit, Integer offset, String sortby, String direction, String search, String checkingId, Integer amount, Integer fee, String memo, OffsetDateTime time, String bolt11, String preimage, String paymentHash, OffsetDateTime expiry, Object extra, String walletId, String webhook, Integer webhookStatus, final ApiCallback _callback) throws ApiException {
        return paymentListApiV1PaymentsGetCall(limit, offset, sortby, direction, search, checkingId, amount, fee, memo, time, bolt11, preimage, paymentHash, expiry, extra, walletId, webhook, webhookStatus, _callback);

    }

    /**
     * get list of payments
     * 
     * @param limit  (optional)
     * @param offset  (optional)
     * @param sortby  (optional)
     * @param direction  (optional)
     * @param search Text based search (optional)
     * @param checkingId Supports Filtering (optional)
     * @param amount Supports Filtering. Supports Search (optional)
     * @param fee Supports Filtering (optional)
     * @param memo Supports Filtering. Supports Search (optional)
     * @param time Supports Filtering (optional)
     * @param bolt11 Supports Filtering (optional)
     * @param preimage Supports Filtering (optional)
     * @param paymentHash Supports Filtering (optional)
     * @param expiry Supports Filtering (optional)
     * @param extra Supports Filtering. Nested attributes can be filtered too, e.g. &#x60;extra.[additional].[attributes]&#x60; (optional, default to {})
     * @param walletId Supports Filtering (optional)
     * @param webhook Supports Filtering (optional)
     * @param webhookStatus Supports Filtering (optional)
     * @return List&lt;Payment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> list of payments </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public List<Payment> paymentListApiV1PaymentsGet(Integer limit, Integer offset, String sortby, String direction, String search, String checkingId, Integer amount, Integer fee, String memo, OffsetDateTime time, String bolt11, String preimage, String paymentHash, OffsetDateTime expiry, Object extra, String walletId, String webhook, Integer webhookStatus) throws ApiException {
        ApiResponse<List<Payment>> localVarResp = paymentListApiV1PaymentsGetWithHttpInfo(limit, offset, sortby, direction, search, checkingId, amount, fee, memo, time, bolt11, preimage, paymentHash, expiry, extra, walletId, webhook, webhookStatus);
        return localVarResp.getData();
    }

    /**
     * get list of payments
     * 
     * @param limit  (optional)
     * @param offset  (optional)
     * @param sortby  (optional)
     * @param direction  (optional)
     * @param search Text based search (optional)
     * @param checkingId Supports Filtering (optional)
     * @param amount Supports Filtering. Supports Search (optional)
     * @param fee Supports Filtering (optional)
     * @param memo Supports Filtering. Supports Search (optional)
     * @param time Supports Filtering (optional)
     * @param bolt11 Supports Filtering (optional)
     * @param preimage Supports Filtering (optional)
     * @param paymentHash Supports Filtering (optional)
     * @param expiry Supports Filtering (optional)
     * @param extra Supports Filtering. Nested attributes can be filtered too, e.g. &#x60;extra.[additional].[attributes]&#x60; (optional, default to {})
     * @param walletId Supports Filtering (optional)
     * @param webhook Supports Filtering (optional)
     * @param webhookStatus Supports Filtering (optional)
     * @return ApiResponse&lt;List&lt;Payment&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> list of payments </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Payment>> paymentListApiV1PaymentsGetWithHttpInfo(Integer limit, Integer offset, String sortby, String direction, String search, String checkingId, Integer amount, Integer fee, String memo, OffsetDateTime time, String bolt11, String preimage, String paymentHash, OffsetDateTime expiry, Object extra, String walletId, String webhook, Integer webhookStatus) throws ApiException {
        okhttp3.Call localVarCall = paymentListApiV1PaymentsGetValidateBeforeCall(limit, offset, sortby, direction, search, checkingId, amount, fee, memo, time, bolt11, preimage, paymentHash, expiry, extra, walletId, webhook, webhookStatus, null);
        Type localVarReturnType = new TypeToken<List<Payment>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * get list of payments (asynchronously)
     * 
     * @param limit  (optional)
     * @param offset  (optional)
     * @param sortby  (optional)
     * @param direction  (optional)
     * @param search Text based search (optional)
     * @param checkingId Supports Filtering (optional)
     * @param amount Supports Filtering. Supports Search (optional)
     * @param fee Supports Filtering (optional)
     * @param memo Supports Filtering. Supports Search (optional)
     * @param time Supports Filtering (optional)
     * @param bolt11 Supports Filtering (optional)
     * @param preimage Supports Filtering (optional)
     * @param paymentHash Supports Filtering (optional)
     * @param expiry Supports Filtering (optional)
     * @param extra Supports Filtering. Nested attributes can be filtered too, e.g. &#x60;extra.[additional].[attributes]&#x60; (optional, default to {})
     * @param walletId Supports Filtering (optional)
     * @param webhook Supports Filtering (optional)
     * @param webhookStatus Supports Filtering (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> list of payments </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call paymentListApiV1PaymentsGetAsync(Integer limit, Integer offset, String sortby, String direction, String search, String checkingId, Integer amount, Integer fee, String memo, OffsetDateTime time, String bolt11, String preimage, String paymentHash, OffsetDateTime expiry, Object extra, String walletId, String webhook, Integer webhookStatus, final ApiCallback<List<Payment>> _callback) throws ApiException {

        okhttp3.Call localVarCall = paymentListApiV1PaymentsGetValidateBeforeCall(limit, offset, sortby, direction, search, checkingId, amount, fee, memo, time, bolt11, preimage, paymentHash, expiry, extra, walletId, webhook, webhookStatus, _callback);
        Type localVarReturnType = new TypeToken<List<Payment>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for paymentListApiV1PaymentsPaginatedGet
     * @param limit  (optional)
     * @param offset  (optional)
     * @param sortby  (optional)
     * @param direction  (optional)
     * @param search Text based search (optional)
     * @param checkingId Supports Filtering (optional)
     * @param amount Supports Filtering. Supports Search (optional)
     * @param fee Supports Filtering (optional)
     * @param memo Supports Filtering. Supports Search (optional)
     * @param time Supports Filtering (optional)
     * @param bolt11 Supports Filtering (optional)
     * @param preimage Supports Filtering (optional)
     * @param paymentHash Supports Filtering (optional)
     * @param expiry Supports Filtering (optional)
     * @param extra Supports Filtering. Nested attributes can be filtered too, e.g. &#x60;extra.[additional].[attributes]&#x60; (optional, default to {})
     * @param walletId Supports Filtering (optional)
     * @param webhook Supports Filtering (optional)
     * @param webhookStatus Supports Filtering (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> list of payments </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call paymentListApiV1PaymentsPaginatedGetCall(Integer limit, Integer offset, String sortby, String direction, String search, String checkingId, Integer amount, Integer fee, String memo, OffsetDateTime time, String bolt11, String preimage, String paymentHash, OffsetDateTime expiry, Object extra, String walletId, String webhook, Integer webhookStatus, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/payments/paginated";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (sortby != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sortby", sortby));
        }

        if (direction != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direction", direction));
        }

        if (search != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("search", search));
        }

        if (checkingId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("checking_id", checkingId));
        }

        if (amount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("amount", amount));
        }

        if (fee != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fee", fee));
        }

        if (memo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("memo", memo));
        }

        if (time != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("time", time));
        }

        if (bolt11 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("bolt11", bolt11));
        }

        if (preimage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("preimage", preimage));
        }

        if (paymentHash != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("payment_hash", paymentHash));
        }

        if (expiry != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("expiry", expiry));
        }

        if (extra != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("extra", extra));
        }

        if (walletId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("wallet_id", walletId));
        }

        if (webhook != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("webhook", webhook));
        }

        if (webhookStatus != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("webhook_status", webhookStatus));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIKeyHeader", "APIKeyQuery" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call paymentListApiV1PaymentsPaginatedGetValidateBeforeCall(Integer limit, Integer offset, String sortby, String direction, String search, String checkingId, Integer amount, Integer fee, String memo, OffsetDateTime time, String bolt11, String preimage, String paymentHash, OffsetDateTime expiry, Object extra, String walletId, String webhook, Integer webhookStatus, final ApiCallback _callback) throws ApiException {
        return paymentListApiV1PaymentsPaginatedGetCall(limit, offset, sortby, direction, search, checkingId, amount, fee, memo, time, bolt11, preimage, paymentHash, expiry, extra, walletId, webhook, webhookStatus, _callback);

    }

    /**
     * get paginated list of payments
     * 
     * @param limit  (optional)
     * @param offset  (optional)
     * @param sortby  (optional)
     * @param direction  (optional)
     * @param search Text based search (optional)
     * @param checkingId Supports Filtering (optional)
     * @param amount Supports Filtering. Supports Search (optional)
     * @param fee Supports Filtering (optional)
     * @param memo Supports Filtering. Supports Search (optional)
     * @param time Supports Filtering (optional)
     * @param bolt11 Supports Filtering (optional)
     * @param preimage Supports Filtering (optional)
     * @param paymentHash Supports Filtering (optional)
     * @param expiry Supports Filtering (optional)
     * @param extra Supports Filtering. Nested attributes can be filtered too, e.g. &#x60;extra.[additional].[attributes]&#x60; (optional, default to {})
     * @param walletId Supports Filtering (optional)
     * @param webhook Supports Filtering (optional)
     * @param webhookStatus Supports Filtering (optional)
     * @return Page
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> list of payments </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public Page paymentListApiV1PaymentsPaginatedGet(Integer limit, Integer offset, String sortby, String direction, String search, String checkingId, Integer amount, Integer fee, String memo, OffsetDateTime time, String bolt11, String preimage, String paymentHash, OffsetDateTime expiry, Object extra, String walletId, String webhook, Integer webhookStatus) throws ApiException {
        ApiResponse<Page> localVarResp = paymentListApiV1PaymentsPaginatedGetWithHttpInfo(limit, offset, sortby, direction, search, checkingId, amount, fee, memo, time, bolt11, preimage, paymentHash, expiry, extra, walletId, webhook, webhookStatus);
        return localVarResp.getData();
    }

    /**
     * get paginated list of payments
     * 
     * @param limit  (optional)
     * @param offset  (optional)
     * @param sortby  (optional)
     * @param direction  (optional)
     * @param search Text based search (optional)
     * @param checkingId Supports Filtering (optional)
     * @param amount Supports Filtering. Supports Search (optional)
     * @param fee Supports Filtering (optional)
     * @param memo Supports Filtering. Supports Search (optional)
     * @param time Supports Filtering (optional)
     * @param bolt11 Supports Filtering (optional)
     * @param preimage Supports Filtering (optional)
     * @param paymentHash Supports Filtering (optional)
     * @param expiry Supports Filtering (optional)
     * @param extra Supports Filtering. Nested attributes can be filtered too, e.g. &#x60;extra.[additional].[attributes]&#x60; (optional, default to {})
     * @param walletId Supports Filtering (optional)
     * @param webhook Supports Filtering (optional)
     * @param webhookStatus Supports Filtering (optional)
     * @return ApiResponse&lt;Page&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> list of payments </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Page> paymentListApiV1PaymentsPaginatedGetWithHttpInfo(Integer limit, Integer offset, String sortby, String direction, String search, String checkingId, Integer amount, Integer fee, String memo, OffsetDateTime time, String bolt11, String preimage, String paymentHash, OffsetDateTime expiry, Object extra, String walletId, String webhook, Integer webhookStatus) throws ApiException {
        okhttp3.Call localVarCall = paymentListApiV1PaymentsPaginatedGetValidateBeforeCall(limit, offset, sortby, direction, search, checkingId, amount, fee, memo, time, bolt11, preimage, paymentHash, expiry, extra, walletId, webhook, webhookStatus, null);
        Type localVarReturnType = new TypeToken<Page>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * get paginated list of payments (asynchronously)
     * 
     * @param limit  (optional)
     * @param offset  (optional)
     * @param sortby  (optional)
     * @param direction  (optional)
     * @param search Text based search (optional)
     * @param checkingId Supports Filtering (optional)
     * @param amount Supports Filtering. Supports Search (optional)
     * @param fee Supports Filtering (optional)
     * @param memo Supports Filtering. Supports Search (optional)
     * @param time Supports Filtering (optional)
     * @param bolt11 Supports Filtering (optional)
     * @param preimage Supports Filtering (optional)
     * @param paymentHash Supports Filtering (optional)
     * @param expiry Supports Filtering (optional)
     * @param extra Supports Filtering. Nested attributes can be filtered too, e.g. &#x60;extra.[additional].[attributes]&#x60; (optional, default to {})
     * @param walletId Supports Filtering (optional)
     * @param webhook Supports Filtering (optional)
     * @param webhookStatus Supports Filtering (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> list of payments </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call paymentListApiV1PaymentsPaginatedGetAsync(Integer limit, Integer offset, String sortby, String direction, String search, String checkingId, Integer amount, Integer fee, String memo, OffsetDateTime time, String bolt11, String preimage, String paymentHash, OffsetDateTime expiry, Object extra, String walletId, String webhook, Integer webhookStatus, final ApiCallback<Page> _callback) throws ApiException {

        okhttp3.Call localVarCall = paymentListApiV1PaymentsPaginatedGetValidateBeforeCall(limit, offset, sortby, direction, search, checkingId, amount, fee, memo, time, bolt11, preimage, paymentHash, expiry, extra, walletId, webhook, webhookStatus, _callback);
        Type localVarReturnType = new TypeToken<Page>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for tinyurlApiV1TinyurlPost
     * @param url  (required)
     * @param endless  (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tinyurlApiV1TinyurlPostCall(String url, Boolean endless, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/tinyurl";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (url != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("url", url));
        }

        if (endless != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endless", endless));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIKeyHeader", "APIKeyQuery" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call tinyurlApiV1TinyurlPostValidateBeforeCall(String url, Boolean endless, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'url' is set
        if (url == null) {
            throw new ApiException("Missing the required parameter 'url' when calling tinyurlApiV1TinyurlPost(Async)");
        }

        return tinyurlApiV1TinyurlPostCall(url, endless, _callback);

    }

    /**
     * Tinyurl
     * creates a tinyurl
     * @param url  (required)
     * @param endless  (optional, default to false)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public Object tinyurlApiV1TinyurlPost(String url, Boolean endless) throws ApiException {
        ApiResponse<Object> localVarResp = tinyurlApiV1TinyurlPostWithHttpInfo(url, endless);
        return localVarResp.getData();
    }

    /**
     * Tinyurl
     * creates a tinyurl
     * @param url  (required)
     * @param endless  (optional, default to false)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> tinyurlApiV1TinyurlPostWithHttpInfo(String url, Boolean endless) throws ApiException {
        okhttp3.Call localVarCall = tinyurlApiV1TinyurlPostValidateBeforeCall(url, endless, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Tinyurl (asynchronously)
     * creates a tinyurl
     * @param url  (required)
     * @param endless  (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tinyurlApiV1TinyurlPostAsync(String url, Boolean endless, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = tinyurlApiV1TinyurlPostValidateBeforeCall(url, endless, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for tinyurlApiV1TinyurlTinyurlIdDelete
     * @param tinyurlId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tinyurlApiV1TinyurlTinyurlIdDeleteCall(String tinyurlId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/tinyurl/{tinyurl_id}"
            .replace("{" + "tinyurl_id" + "}", localVarApiClient.escapeString(tinyurlId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIKeyHeader", "APIKeyQuery" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call tinyurlApiV1TinyurlTinyurlIdDeleteValidateBeforeCall(String tinyurlId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tinyurlId' is set
        if (tinyurlId == null) {
            throw new ApiException("Missing the required parameter 'tinyurlId' when calling tinyurlApiV1TinyurlTinyurlIdDelete(Async)");
        }

        return tinyurlApiV1TinyurlTinyurlIdDeleteCall(tinyurlId, _callback);

    }

    /**
     * Tinyurl
     * delete a tinyurl by id
     * @param tinyurlId  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public Object tinyurlApiV1TinyurlTinyurlIdDelete(String tinyurlId) throws ApiException {
        ApiResponse<Object> localVarResp = tinyurlApiV1TinyurlTinyurlIdDeleteWithHttpInfo(tinyurlId);
        return localVarResp.getData();
    }

    /**
     * Tinyurl
     * delete a tinyurl by id
     * @param tinyurlId  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> tinyurlApiV1TinyurlTinyurlIdDeleteWithHttpInfo(String tinyurlId) throws ApiException {
        okhttp3.Call localVarCall = tinyurlApiV1TinyurlTinyurlIdDeleteValidateBeforeCall(tinyurlId, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Tinyurl (asynchronously)
     * delete a tinyurl by id
     * @param tinyurlId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tinyurlApiV1TinyurlTinyurlIdDeleteAsync(String tinyurlId, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = tinyurlApiV1TinyurlTinyurlIdDeleteValidateBeforeCall(tinyurlId, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for tinyurlApiV1TinyurlTinyurlIdGet
     * @param tinyurlId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tinyurlApiV1TinyurlTinyurlIdGetCall(String tinyurlId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/tinyurl/{tinyurl_id}"
            .replace("{" + "tinyurl_id" + "}", localVarApiClient.escapeString(tinyurlId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIKeyHeader", "APIKeyQuery" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call tinyurlApiV1TinyurlTinyurlIdGetValidateBeforeCall(String tinyurlId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tinyurlId' is set
        if (tinyurlId == null) {
            throw new ApiException("Missing the required parameter 'tinyurlId' when calling tinyurlApiV1TinyurlTinyurlIdGet(Async)");
        }

        return tinyurlApiV1TinyurlTinyurlIdGetCall(tinyurlId, _callback);

    }

    /**
     * Tinyurl
     * get a tinyurl by id
     * @param tinyurlId  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public Object tinyurlApiV1TinyurlTinyurlIdGet(String tinyurlId) throws ApiException {
        ApiResponse<Object> localVarResp = tinyurlApiV1TinyurlTinyurlIdGetWithHttpInfo(tinyurlId);
        return localVarResp.getData();
    }

    /**
     * Tinyurl
     * get a tinyurl by id
     * @param tinyurlId  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> tinyurlApiV1TinyurlTinyurlIdGetWithHttpInfo(String tinyurlId) throws ApiException {
        okhttp3.Call localVarCall = tinyurlApiV1TinyurlTinyurlIdGetValidateBeforeCall(tinyurlId, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Tinyurl (asynchronously)
     * get a tinyurl by id
     * @param tinyurlId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tinyurlApiV1TinyurlTinyurlIdGetAsync(String tinyurlId, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = tinyurlApiV1TinyurlTinyurlIdGetValidateBeforeCall(tinyurlId, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for tinyurlTTinyurlIdGet
     * @param tinyurlId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tinyurlTTinyurlIdGetCall(String tinyurlId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/t/{tinyurl_id}"
            .replace("{" + "tinyurl_id" + "}", localVarApiClient.escapeString(tinyurlId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call tinyurlTTinyurlIdGetValidateBeforeCall(String tinyurlId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tinyurlId' is set
        if (tinyurlId == null) {
            throw new ApiException("Missing the required parameter 'tinyurlId' when calling tinyurlTTinyurlIdGet(Async)");
        }

        return tinyurlTTinyurlIdGetCall(tinyurlId, _callback);

    }

    /**
     * Tinyurl
     * redirects a tinyurl by id
     * @param tinyurlId  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public Object tinyurlTTinyurlIdGet(String tinyurlId) throws ApiException {
        ApiResponse<Object> localVarResp = tinyurlTTinyurlIdGetWithHttpInfo(tinyurlId);
        return localVarResp.getData();
    }

    /**
     * Tinyurl
     * redirects a tinyurl by id
     * @param tinyurlId  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> tinyurlTTinyurlIdGetWithHttpInfo(String tinyurlId) throws ApiException {
        okhttp3.Call localVarCall = tinyurlTTinyurlIdGetValidateBeforeCall(tinyurlId, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Tinyurl (asynchronously)
     * redirects a tinyurl by id
     * @param tinyurlId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tinyurlTTinyurlIdGetAsync(String tinyurlId, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = tinyurlTTinyurlIdGetValidateBeforeCall(tinyurlId, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for topupAdminApiV1TopupPut
     * @param usr  (required)
     * @param createTopup  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call topupAdminApiV1TopupPutCall(String usr, CreateTopup createTopup, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createTopup;

        // create path and map variables
        String localVarPath = "/admin/api/v1/topup/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (usr != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("usr", usr));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call topupAdminApiV1TopupPutValidateBeforeCall(String usr, CreateTopup createTopup, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'usr' is set
        if (usr == null) {
            throw new ApiException("Missing the required parameter 'usr' when calling topupAdminApiV1TopupPut(Async)");
        }

        // verify the required parameter 'createTopup' is set
        if (createTopup == null) {
            throw new ApiException("Missing the required parameter 'createTopup' when calling topupAdminApiV1TopupPut(Async)");
        }

        return topupAdminApiV1TopupPutCall(usr, createTopup, _callback);

    }

    /**
     * Topup
     * 
     * @param usr  (required)
     * @param createTopup  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public Object topupAdminApiV1TopupPut(String usr, CreateTopup createTopup) throws ApiException {
        ApiResponse<Object> localVarResp = topupAdminApiV1TopupPutWithHttpInfo(usr, createTopup);
        return localVarResp.getData();
    }

    /**
     * Topup
     * 
     * @param usr  (required)
     * @param createTopup  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> topupAdminApiV1TopupPutWithHttpInfo(String usr, CreateTopup createTopup) throws ApiException {
        okhttp3.Call localVarCall = topupAdminApiV1TopupPutValidateBeforeCall(usr, createTopup, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Topup (asynchronously)
     * 
     * @param usr  (required)
     * @param createTopup  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call topupAdminApiV1TopupPutAsync(String usr, CreateTopup createTopup, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = topupAdminApiV1TopupPutValidateBeforeCall(usr, createTopup, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for websocketUpdateGetApiV1WsItemIdDataGet
     * @param itemId  (required)
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call websocketUpdateGetApiV1WsItemIdDataGetCall(String itemId, String data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/ws/{item_id}/{data}"
            .replace("{" + "item_id" + "}", localVarApiClient.escapeString(itemId.toString()))
            .replace("{" + "data" + "}", localVarApiClient.escapeString(data.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call websocketUpdateGetApiV1WsItemIdDataGetValidateBeforeCall(String itemId, String data, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'itemId' is set
        if (itemId == null) {
            throw new ApiException("Missing the required parameter 'itemId' when calling websocketUpdateGetApiV1WsItemIdDataGet(Async)");
        }

        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling websocketUpdateGetApiV1WsItemIdDataGet(Async)");
        }

        return websocketUpdateGetApiV1WsItemIdDataGetCall(itemId, data, _callback);

    }

    /**
     * Websocket Update Get
     * 
     * @param itemId  (required)
     * @param data  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public Object websocketUpdateGetApiV1WsItemIdDataGet(String itemId, String data) throws ApiException {
        ApiResponse<Object> localVarResp = websocketUpdateGetApiV1WsItemIdDataGetWithHttpInfo(itemId, data);
        return localVarResp.getData();
    }

    /**
     * Websocket Update Get
     * 
     * @param itemId  (required)
     * @param data  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> websocketUpdateGetApiV1WsItemIdDataGetWithHttpInfo(String itemId, String data) throws ApiException {
        okhttp3.Call localVarCall = websocketUpdateGetApiV1WsItemIdDataGetValidateBeforeCall(itemId, data, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Websocket Update Get (asynchronously)
     * 
     * @param itemId  (required)
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call websocketUpdateGetApiV1WsItemIdDataGetAsync(String itemId, String data, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = websocketUpdateGetApiV1WsItemIdDataGetValidateBeforeCall(itemId, data, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for websocketUpdatePostApiV1WsItemIdPost
     * @param itemId  (required)
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call websocketUpdatePostApiV1WsItemIdPostCall(String itemId, String data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/ws/{item_id}"
            .replace("{" + "item_id" + "}", localVarApiClient.escapeString(itemId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (data != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("data", data));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call websocketUpdatePostApiV1WsItemIdPostValidateBeforeCall(String itemId, String data, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'itemId' is set
        if (itemId == null) {
            throw new ApiException("Missing the required parameter 'itemId' when calling websocketUpdatePostApiV1WsItemIdPost(Async)");
        }

        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling websocketUpdatePostApiV1WsItemIdPost(Async)");
        }

        return websocketUpdatePostApiV1WsItemIdPostCall(itemId, data, _callback);

    }

    /**
     * Websocket Update Post
     * 
     * @param itemId  (required)
     * @param data  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public Object websocketUpdatePostApiV1WsItemIdPost(String itemId, String data) throws ApiException {
        ApiResponse<Object> localVarResp = websocketUpdatePostApiV1WsItemIdPostWithHttpInfo(itemId, data);
        return localVarResp.getData();
    }

    /**
     * Websocket Update Post
     * 
     * @param itemId  (required)
     * @param data  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> websocketUpdatePostApiV1WsItemIdPostWithHttpInfo(String itemId, String data) throws ApiException {
        okhttp3.Call localVarCall = websocketUpdatePostApiV1WsItemIdPostValidateBeforeCall(itemId, data, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Websocket Update Post (asynchronously)
     * 
     * @param itemId  (required)
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call websocketUpdatePostApiV1WsItemIdPostAsync(String itemId, String data, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = websocketUpdatePostApiV1WsItemIdPostValidateBeforeCall(itemId, data, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
