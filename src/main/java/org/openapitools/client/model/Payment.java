/*
 * lnbits
 * API for LNbits, the free and open source bitcoin wallet and accounts system with plugins.
 *
 * The version of the OpenAPI document: 0.10.9
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Payment
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-07-01T17:53:25.667+02:00[Europe/Vienna]")
public class Payment {
  public static final String SERIALIZED_NAME_CHECKING_ID = "checking_id";
  @SerializedName(SERIALIZED_NAME_CHECKING_ID)
  private String checkingId;

  public static final String SERIALIZED_NAME_PENDING = "pending";
  @SerializedName(SERIALIZED_NAME_PENDING)
  private Boolean pending;

  public static final String SERIALIZED_NAME_AMOUNT = "amount";
  @SerializedName(SERIALIZED_NAME_AMOUNT)
  private Integer amount;

  public static final String SERIALIZED_NAME_FEE = "fee";
  @SerializedName(SERIALIZED_NAME_FEE)
  private Integer fee;

  public static final String SERIALIZED_NAME_MEMO = "memo";
  @SerializedName(SERIALIZED_NAME_MEMO)
  private String memo;

  public static final String SERIALIZED_NAME_TIME = "time";
  @SerializedName(SERIALIZED_NAME_TIME)
  private Integer time;

  public static final String SERIALIZED_NAME_BOLT11 = "bolt11";
  @SerializedName(SERIALIZED_NAME_BOLT11)
  private String bolt11;

  public static final String SERIALIZED_NAME_PREIMAGE = "preimage";
  @SerializedName(SERIALIZED_NAME_PREIMAGE)
  private String preimage;

  public static final String SERIALIZED_NAME_PAYMENT_HASH = "payment_hash";
  @SerializedName(SERIALIZED_NAME_PAYMENT_HASH)
  private String paymentHash;

  public static final String SERIALIZED_NAME_EXPIRY = "expiry";
  @SerializedName(SERIALIZED_NAME_EXPIRY)
  private BigDecimal expiry;

  public static final String SERIALIZED_NAME_EXTRA = "extra";
  @SerializedName(SERIALIZED_NAME_EXTRA)
  private Object extra = {};

  public static final String SERIALIZED_NAME_WALLET_ID = "wallet_id";
  @SerializedName(SERIALIZED_NAME_WALLET_ID)
  private String walletId;

  public static final String SERIALIZED_NAME_WEBHOOK = "webhook";
  @SerializedName(SERIALIZED_NAME_WEBHOOK)
  private String webhook;

  public static final String SERIALIZED_NAME_WEBHOOK_STATUS = "webhook_status";
  @SerializedName(SERIALIZED_NAME_WEBHOOK_STATUS)
  private Integer webhookStatus;

  public Payment() {
  }

  public Payment checkingId(String checkingId) {
    
    this.checkingId = checkingId;
    return this;
  }

   /**
   * Get checkingId
   * @return checkingId
  **/
  @javax.annotation.Nonnull
  public String getCheckingId() {
    return checkingId;
  }


  public void setCheckingId(String checkingId) {
    this.checkingId = checkingId;
  }


  public Payment pending(Boolean pending) {
    
    this.pending = pending;
    return this;
  }

   /**
   * Get pending
   * @return pending
  **/
  @javax.annotation.Nonnull
  public Boolean getPending() {
    return pending;
  }


  public void setPending(Boolean pending) {
    this.pending = pending;
  }


  public Payment amount(Integer amount) {
    
    this.amount = amount;
    return this;
  }

   /**
   * Get amount
   * @return amount
  **/
  @javax.annotation.Nonnull
  public Integer getAmount() {
    return amount;
  }


  public void setAmount(Integer amount) {
    this.amount = amount;
  }


  public Payment fee(Integer fee) {
    
    this.fee = fee;
    return this;
  }

   /**
   * Get fee
   * @return fee
  **/
  @javax.annotation.Nonnull
  public Integer getFee() {
    return fee;
  }


  public void setFee(Integer fee) {
    this.fee = fee;
  }


  public Payment memo(String memo) {
    
    this.memo = memo;
    return this;
  }

   /**
   * Get memo
   * @return memo
  **/
  @javax.annotation.Nullable
  public String getMemo() {
    return memo;
  }


  public void setMemo(String memo) {
    this.memo = memo;
  }


  public Payment time(Integer time) {
    
    this.time = time;
    return this;
  }

   /**
   * Get time
   * @return time
  **/
  @javax.annotation.Nonnull
  public Integer getTime() {
    return time;
  }


  public void setTime(Integer time) {
    this.time = time;
  }


  public Payment bolt11(String bolt11) {
    
    this.bolt11 = bolt11;
    return this;
  }

   /**
   * Get bolt11
   * @return bolt11
  **/
  @javax.annotation.Nonnull
  public String getBolt11() {
    return bolt11;
  }


  public void setBolt11(String bolt11) {
    this.bolt11 = bolt11;
  }


  public Payment preimage(String preimage) {
    
    this.preimage = preimage;
    return this;
  }

   /**
   * Get preimage
   * @return preimage
  **/
  @javax.annotation.Nonnull
  public String getPreimage() {
    return preimage;
  }


  public void setPreimage(String preimage) {
    this.preimage = preimage;
  }


  public Payment paymentHash(String paymentHash) {
    
    this.paymentHash = paymentHash;
    return this;
  }

   /**
   * Get paymentHash
   * @return paymentHash
  **/
  @javax.annotation.Nonnull
  public String getPaymentHash() {
    return paymentHash;
  }


  public void setPaymentHash(String paymentHash) {
    this.paymentHash = paymentHash;
  }


  public Payment expiry(BigDecimal expiry) {
    
    this.expiry = expiry;
    return this;
  }

   /**
   * Get expiry
   * @return expiry
  **/
  @javax.annotation.Nullable
  public BigDecimal getExpiry() {
    return expiry;
  }


  public void setExpiry(BigDecimal expiry) {
    this.expiry = expiry;
  }


  public Payment extra(Object extra) {
    
    this.extra = extra;
    return this;
  }

   /**
   * Get extra
   * @return extra
  **/
  @javax.annotation.Nullable
  public Object getExtra() {
    return extra;
  }


  public void setExtra(Object extra) {
    this.extra = extra;
  }


  public Payment walletId(String walletId) {
    
    this.walletId = walletId;
    return this;
  }

   /**
   * Get walletId
   * @return walletId
  **/
  @javax.annotation.Nonnull
  public String getWalletId() {
    return walletId;
  }


  public void setWalletId(String walletId) {
    this.walletId = walletId;
  }


  public Payment webhook(String webhook) {
    
    this.webhook = webhook;
    return this;
  }

   /**
   * Get webhook
   * @return webhook
  **/
  @javax.annotation.Nullable
  public String getWebhook() {
    return webhook;
  }


  public void setWebhook(String webhook) {
    this.webhook = webhook;
  }


  public Payment webhookStatus(Integer webhookStatus) {
    
    this.webhookStatus = webhookStatus;
    return this;
  }

   /**
   * Get webhookStatus
   * @return webhookStatus
  **/
  @javax.annotation.Nullable
  public Integer getWebhookStatus() {
    return webhookStatus;
  }


  public void setWebhookStatus(Integer webhookStatus) {
    this.webhookStatus = webhookStatus;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Payment payment = (Payment) o;
    return Objects.equals(this.checkingId, payment.checkingId) &&
        Objects.equals(this.pending, payment.pending) &&
        Objects.equals(this.amount, payment.amount) &&
        Objects.equals(this.fee, payment.fee) &&
        Objects.equals(this.memo, payment.memo) &&
        Objects.equals(this.time, payment.time) &&
        Objects.equals(this.bolt11, payment.bolt11) &&
        Objects.equals(this.preimage, payment.preimage) &&
        Objects.equals(this.paymentHash, payment.paymentHash) &&
        Objects.equals(this.expiry, payment.expiry) &&
        Objects.equals(this.extra, payment.extra) &&
        Objects.equals(this.walletId, payment.walletId) &&
        Objects.equals(this.webhook, payment.webhook) &&
        Objects.equals(this.webhookStatus, payment.webhookStatus);
  }

  @Override
  public int hashCode() {
    return Objects.hash(checkingId, pending, amount, fee, memo, time, bolt11, preimage, paymentHash, expiry, extra, walletId, webhook, webhookStatus);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Payment {\n");
    sb.append("    checkingId: ").append(toIndentedString(checkingId)).append("\n");
    sb.append("    pending: ").append(toIndentedString(pending)).append("\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    fee: ").append(toIndentedString(fee)).append("\n");
    sb.append("    memo: ").append(toIndentedString(memo)).append("\n");
    sb.append("    time: ").append(toIndentedString(time)).append("\n");
    sb.append("    bolt11: ").append(toIndentedString(bolt11)).append("\n");
    sb.append("    preimage: ").append(toIndentedString(preimage)).append("\n");
    sb.append("    paymentHash: ").append(toIndentedString(paymentHash)).append("\n");
    sb.append("    expiry: ").append(toIndentedString(expiry)).append("\n");
    sb.append("    extra: ").append(toIndentedString(extra)).append("\n");
    sb.append("    walletId: ").append(toIndentedString(walletId)).append("\n");
    sb.append("    webhook: ").append(toIndentedString(webhook)).append("\n");
    sb.append("    webhookStatus: ").append(toIndentedString(webhookStatus)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("checking_id");
    openapiFields.add("pending");
    openapiFields.add("amount");
    openapiFields.add("fee");
    openapiFields.add("memo");
    openapiFields.add("time");
    openapiFields.add("bolt11");
    openapiFields.add("preimage");
    openapiFields.add("payment_hash");
    openapiFields.add("expiry");
    openapiFields.add("extra");
    openapiFields.add("wallet_id");
    openapiFields.add("webhook");
    openapiFields.add("webhook_status");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("checking_id");
    openapiRequiredFields.add("pending");
    openapiRequiredFields.add("amount");
    openapiRequiredFields.add("fee");
    openapiRequiredFields.add("time");
    openapiRequiredFields.add("bolt11");
    openapiRequiredFields.add("preimage");
    openapiRequiredFields.add("payment_hash");
    openapiRequiredFields.add("wallet_id");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to Payment
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!Payment.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Payment is not found in the empty JSON string", Payment.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!Payment.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Payment` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Payment.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("checking_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `checking_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("checking_id").toString()));
      }
      if ((jsonObj.get("memo") != null && !jsonObj.get("memo").isJsonNull()) && !jsonObj.get("memo").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `memo` to be a primitive type in the JSON string but got `%s`", jsonObj.get("memo").toString()));
      }
      if (!jsonObj.get("bolt11").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bolt11` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bolt11").toString()));
      }
      if (!jsonObj.get("preimage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `preimage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("preimage").toString()));
      }
      if (!jsonObj.get("payment_hash").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `payment_hash` to be a primitive type in the JSON string but got `%s`", jsonObj.get("payment_hash").toString()));
      }
      if (!jsonObj.get("wallet_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `wallet_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("wallet_id").toString()));
      }
      if ((jsonObj.get("webhook") != null && !jsonObj.get("webhook").isJsonNull()) && !jsonObj.get("webhook").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `webhook` to be a primitive type in the JSON string but got `%s`", jsonObj.get("webhook").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Payment.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Payment' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Payment> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Payment.class));

       return (TypeAdapter<T>) new TypeAdapter<Payment>() {
           @Override
           public void write(JsonWriter out, Payment value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Payment read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Payment given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Payment
  * @throws IOException if the JSON string is invalid with respect to Payment
  */
  public static Payment fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Payment.class);
  }

 /**
  * Convert an instance of Payment to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

